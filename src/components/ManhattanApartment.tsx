/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Object_0: THREE.Mesh
    Object_0_1: THREE.Mesh
    Object_0_2: THREE.Mesh
    Object_0_3: THREE.Mesh
  }
  materials: {
    cropped_textured_mesh_0: THREE.MeshBasicMaterial
    cropped_textured_mesh_1: THREE.MeshBasicMaterial
    cropped_textured_mesh_2: THREE.MeshBasicMaterial
    cropped_textured_mesh_3: THREE.MeshBasicMaterial
  }
}

export default function ManhattanApartment({ ...props }: JSX.IntrinsicElements['group']) {
  const spaceURL = `${process.env.REACT_APP_ASSETS_URL}/manhattan-apartment-transformed.glb`;
  const group = useRef<THREE.Group>(null!)
  const { nodes, materials } = useGLTF(spaceURL, 'https://www.gstatic.com/draco/versioned/decoders/1.4.1/') as GLTFResult
  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0.03]}>
        <mesh castShadow receiveShadow geometry={nodes.Object_0.geometry} material={materials.cropped_textured_mesh_0} />
        <mesh castShadow receiveShadow geometry={nodes.Object_0_1.geometry} material={materials.cropped_textured_mesh_1} />
        <mesh castShadow receiveShadow geometry={nodes.Object_0_2.geometry} material={materials.cropped_textured_mesh_2} />
        <mesh castShadow receiveShadow geometry={nodes.Object_0_3.geometry} material={materials.cropped_textured_mesh_3} />
      </group>
    </group>
  )
}
